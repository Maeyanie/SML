cmake_minimum_required(VERSION 3.10)
include(FindPkgConfig)
include(CheckIncludeFileCXX)
include(CheckCXXSourceCompiles)

project(SML)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

pkg_search_module(SPARSEHASH libsparsehash)
if(SPARSEHASH_FOUND)
	option(USE_SPARSEHASH "Use Google Sparsehash" ON)
endif()

find_package(Boost)
if(Boost_FOUND)
	option(USE_BOOST "Use Boost Spatial Index" ON)
endif()

set_property(GLOBAL PROPERTY FSLIB "")
check_include_file_cxx("filesystem" HAVE_FS)
if(HAVE_FS)
	check_cxx_source_compiles("#include <filesystem>\nint main(void) { std::filesystem::space(\".\"); }" HAVE_BUILTIN_FS)
	if(NOT HAVE_BUILTIN_FS)
		set(CMAKE_REQUIRED_LIBRARIES "stdc++fs")
		check_cxx_source_compiles("#include <filesystem>\nint main(void) { std::filesystem::space(\".\"); }" HAVE_STDCXXFS_FS)
		
		if(HAVE_STDCXXFS_FS)
			set_property(GLOBAL PROPERTY FSLIB "stdc++fs")
		else()
			set(CMAKE_REQUIRED_LIBRARIES "c++fs")
			check_cxx_source_compiles("#include <filesystem>\nint main(void) { std::filesystem::space(\".\"); }" HAVE_CXXFS_FS)
			if(HAVE_CXXFS_FS)
				set_property(GLOBAL PROPERTY FSLIB "c++fs")
			endif()
		endif()
	endif()
else()
	check_include_file_cxx("experimental/filesystem" HAVE_EXPFS)
	if(HAVE_EXPFS)
		set(CMAKE_REQUIRED_LIBRARIES "")
		check_cxx_source_compiles("#include <experimental/filesystem>\nint main(void) { std::experimental::filesystem::space(\".\"); }" HAVE_BUILTIN_EXPFS)
		if(NOT HAVE_BUILTIN_EXPFS)
			set(CMAKE_REQUIRED_LIBRARIES "stdc++fs")
			check_cxx_source_compiles("#include <experimental/filesystem>\nint main(void) { std::experimental::filesystem::space(\".\"); }" HAVE_STDCXXFS_EXPFS)
			
			if(HAVE_STDCXXFS_EXPFS)
				set_property(GLOBAL PROPERTY FSLIB "stdc++fs")
			else()
				set(CMAKE_REQUIRED_LIBRARIES "c++fs")
				check_cxx_source_compiles("#include <experimental/filesystem>\nint main(void) { std::experimental::filesystem::space(\".\"); }" HAVE_CXXFS_EXPFS)
				if(HAVE_CXXFS_EXPFS)
					set_property(GLOBAL PROPERTY FSLIB "c++fs")
				endif()
			endif()
		endif()
	endif()
endif()

get_property(FSLIB GLOBAL PROPERTY FSLIB)
#message(STATUS "FSLIB: ${FSLIB}")
if(NOT HAVE_BUILTIN_FS AND NOT HAVE_BUILTIN_EXPFS AND FSLIB STREQUAL "")
	message(FATAL_ERROR, "Could not find C++ filesystem support.")
endif()

configure_file(config.h.in config.h)

add_executable(sml2stl sml2stl.cpp crc32c.c mesh.cpp stripsearch.cpp sml.cpp stl.cpp)
target_include_directories(sml2stl PUBLIC "${PROJECT_BINARY_DIR}")
target_link_libraries(sml2stl PUBLIC "${FSLIB}")

add_executable(stl2sml stl2sml.cpp crc32c.c mesh.cpp stripsearch.cpp sml.cpp stl.cpp)
target_include_directories(stl2sml PUBLIC "${PROJECT_BINARY_DIR}")
target_link_libraries(stl2sml PUBLIC "${FSLIB}")

add_executable(sml2obj sml2obj.cpp crc32c.c mesh.cpp stripsearch.cpp sml.cpp obj.cpp)
target_include_directories(sml2obj PUBLIC "${PROJECT_BINARY_DIR}")
target_link_libraries(sml2obj PUBLIC "${FSLIB}")

add_executable(obj2sml obj2sml.cpp crc32c.c mesh.cpp stripsearch.cpp sml.cpp obj.cpp)
target_include_directories(obj2sml PUBLIC "${PROJECT_BINARY_DIR}")
target_link_libraries(obj2sml PUBLIC "${FSLIB}")
